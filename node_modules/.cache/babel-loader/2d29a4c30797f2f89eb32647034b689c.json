{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport Scheme from '../model/Scheme';\nconst SchemeSlice = createSlice({\n  name: 'scheme',\n  initialState: {\n    schemeState: new Scheme(),\n    schemeList: [],\n    schemeTypeList: [],\n    schemeDateList: [],\n    schemeEligibilityList: [],\n    schemeDelete: new Scheme(),\n    schemeAdd: new Scheme()\n  },\n  reducers: {\n    getSchemeById: (state, action) => {\n      console.log(\"SchemeSlice reducers getSchemeById\");\n      state.schemeState = action.payload;\n    },\n    getAllSchemes: (state, action) => {\n      console.log(\"SchemeSlice reducers getAllSchemes\");\n      state.schemeList = action.payload;\n    },\n    getSchemeByType: (state, action) => {\n      console.log(\"SchemeSlice reducers getSchemeByType\");\n      state.schemeTypeList = action.payload;\n    },\n    getSchemeByLaunchDate: (state, action) => {\n      console.log(\"SchemeSlice reducers getSchemeByLaunchDate\");\n      state.schemeDateList = action.payload;\n    },\n    getSchemeByEligibility: (state, action) => {\n      console.log(\"SchemeSlice reducers getSchemeByEligibility\");\n      state.schemeEligibilityList = action.payload;\n    },\n    deleteSchemeByID: (state, action) => {\n      console.log(\"SchemeSlice reducers deleteScheme\");\n      state.schemeDelete = action.payload;\n    },\n    addScheme: (state, action) => {\n      console.log(\"SchemeSlice reducers addScheme\");\n      state.schemeAdd = action.payload;\n    }\n  }\n});\nexport const {\n  getSchemeById,\n  getAllSchemes,\n  getSchemeByType,\n  getSchemeByLaunchDate,\n  getSchemeByEligibility,\n  deleteSchemeByID,\n  addScheme\n} = SchemeSlice.actions;\nexport default SchemeSlice.reducer;","map":{"version":3,"sources":["C:/Users/SADARKAR/Downloads/women-empowerment-frontend-main/src/redux/SchemeSlice.js"],"names":["createSlice","Scheme","SchemeSlice","name","initialState","schemeState","schemeList","schemeTypeList","schemeDateList","schemeEligibilityList","schemeDelete","schemeAdd","reducers","getSchemeById","state","action","console","log","payload","getAllSchemes","getSchemeByType","getSchemeByLaunchDate","getSchemeByEligibility","deleteSchemeByID","addScheme","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,WAAW,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAC,QADuB;AAG5BC,EAAAA,YAAY,EAAE;AAEVC,IAAAA,WAAW,EAAE,IAAIJ,MAAJ,EAFH;AAGVK,IAAAA,UAAU,EAAG,EAHH;AAIVC,IAAAA,cAAc,EAAG,EAJP;AAKVC,IAAAA,cAAc,EAAG,EALP;AAMVC,IAAAA,qBAAqB,EAAG,EANd;AAOVC,IAAAA,YAAY,EAAG,IAAIT,MAAJ,EAPL;AAQVU,IAAAA,SAAS,EAAG,IAAIV,MAAJ;AARF,GAHc;AAc5BW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAH,MAAAA,KAAK,CAACT,WAAN,GAAoBU,MAAM,CAACG,OAA3B;AACH,KAJK;AAMNC,IAAAA,aAAa,EAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAH,MAAAA,KAAK,CAACR,UAAN,GAAmBS,MAAM,CAACG,OAA1B;AACH,KATK;AAWNE,IAAAA,eAAe,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAH,MAAAA,KAAK,CAACP,cAAN,GAAuBQ,MAAM,CAACG,OAA9B;AACH,KAdK;AAgBNG,IAAAA,qBAAqB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAH,MAAAA,KAAK,CAACN,cAAN,GAAuBO,MAAM,CAACG,OAA9B;AACH,KAnBK;AAqBNI,IAAAA,sBAAsB,EAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACAH,MAAAA,KAAK,CAACL,qBAAN,GAA8BM,MAAM,CAACG,OAArC;AACH,KAxBK;AA0BNK,IAAAA,gBAAgB,EAAG,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAH,MAAAA,KAAK,CAACJ,YAAN,GAAqBK,MAAM,CAACG,OAA5B;AACH,KA7BK;AA+BNM,IAAAA,SAAS,EAAG,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACG,OAAzB;AACH;AAlCK;AAdkB,CAAD,CAA/B;AAwDA,OAAO,MAAM;AAACL,EAAAA,aAAD;AAAgBM,EAAAA,aAAhB;AAA+BC,EAAAA,eAA/B;AAAgDC,EAAAA,qBAAhD;AAAuEC,EAAAA,sBAAvE;AAA+FC,EAAAA,gBAA/F;AAAiHC,EAAAA;AAAjH,IAA8HtB,WAAW,CAACuB,OAAhJ;AACP,eAAevB,WAAW,CAACwB,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport Scheme from '../model/Scheme'\n\nconst SchemeSlice = createSlice({\n    name:'scheme',\n\n    initialState: {\n\n        schemeState: new Scheme(),\n        schemeList : [],\n        schemeTypeList : [],\n        schemeDateList : [],\n        schemeEligibilityList : [],\n        schemeDelete : new Scheme(),\n        schemeAdd : new Scheme(),\n    },\n\n    reducers: {\n        getSchemeById: (state, action) => {\n            console.log(\"SchemeSlice reducers getSchemeById\");\n            state.schemeState = action.payload;\n        },\n\n        getAllSchemes : (state, action) => {\n            console.log(\"SchemeSlice reducers getAllSchemes\");\n            state.schemeList = action.payload;\n        },\n\n        getSchemeByType: (state, action) => {\n            console.log(\"SchemeSlice reducers getSchemeByType\");\n            state.schemeTypeList = action.payload;\n        },\n\n        getSchemeByLaunchDate: (state, action) => {\n            console.log(\"SchemeSlice reducers getSchemeByLaunchDate\");\n            state.schemeDateList = action.payload;\n        },\n\n        getSchemeByEligibility : (state, action) => {\n            console.log(\"SchemeSlice reducers getSchemeByEligibility\");\n            state.schemeEligibilityList = action.payload;\n        },\n\n        deleteSchemeByID : (state, action) => {\n            console.log(\"SchemeSlice reducers deleteScheme\");\n            state.schemeDelete = action.payload;\n        },\n\n        addScheme : (state, action) => {\n            console.log(\"SchemeSlice reducers addScheme\");\n            state.schemeAdd = action.payload;\n        },\n\n\n    }\n}\n\n);\n\nexport const {getSchemeById, getAllSchemes, getSchemeByType, getSchemeByLaunchDate, getSchemeByEligibility, deleteSchemeByID, addScheme} = SchemeSlice.actions;\nexport default SchemeSlice.reducer;"]},"metadata":{},"sourceType":"module"}